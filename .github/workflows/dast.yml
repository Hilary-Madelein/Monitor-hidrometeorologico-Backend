name: 50 DAST Scan Docker Image

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      image-tag:
        type: string
        description: 'The name of the docker image to scan'
        required: true

env:
  REGISTRY: docker.io
  IMAGE_TAG: observatorio_backend:latest

jobs:
  dast-scan:
    name: DAST Scan
    runs-on: ubuntu-latest
    steps:
      # Loguearse en el registro de contenedores
      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Clonar el repositorio
      - name: Check out the repository
        uses: actions/checkout@v4

      # Construir la imagen de Docker
      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_TAG }} .

      # Iniciar el contenedor de la aplicación
      - name: Start demo app container
        run: |
          docker rm -f demoApp || true
          docker run -d -p 5006:5006 --name demoApp \
            -e COSMOS_ENDPOINT=${{ secrets.COSMOS_ENDPOINT }} \
            -e COSMOS_KEY=${{ secrets.COSMOS_KEY }} \
            ${{ env.IMAGE_TAG }}

      # Verificar si el contenedor está corriendo
      - name: Check container status
        run: docker ps

      # Inspeccionar los logs del contenedor
      - name: Inspect container logs
        run: docker logs demoApp

      # Comprobar si el endpoint está accesible
      - name: Test container endpoint
        run: |
          echo "Verificando si el servicio responde en localhost:5006..."
          for i in {1..10}; do
            if curl -s http://localhost:5006 > /dev/null; then
              echo "El servicio está disponible."; exit 0;
            fi
            echo "Intento $i: El servicio no está disponible, reintentando...";
            sleep 5;
          done
          echo "El servicio no pudo inicializarse."; exit 1

      # Ejecutar un escaneo DAST con ZAP desde Docker Hub
      - name: Run ZAP DAST Scan
        run: |
          docker pull owasp/zap2docker-stable || exit 1
          docker run --rm -v $(pwd):/zap/wrk/:rw owasp/zap2docker-stable zap-full-scan.py \
          -t http://localhost:5006 -r zap_report.html || exit 0

      # Subir el reporte generado
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: ZAP_Report
          path: zap_report.html

      # Limpiar los recursos de Docker
      - name: Stop and clean up Docker container
        if: always()
        run: |
          docker stop demoApp && docker rm demoApp
          docker container prune --force
          docker image prune --force
